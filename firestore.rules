/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing role-based access control and ownership checks.
 * It uses a flexible data model, deferring strict schema validation for a later phase.
 *
 * Data Structure:
 * - /products/{productId}: Publicly readable, but create/update/delete restricted to authorized users.
 * - /categories/{categoryId}: Publicly readable. Write operations are denied.
 * - /users/{userId}: Only the authenticated user can read/write their own document.
 * - /schedules/{scheduleId}: Write operations are denied.
 * - /audit/{auditId}: Write operations are denied.
 *
 * Key Security Decisions:
 * - Listing all users is disallowed.
 * - Categories, Schedules, and Audit logs are read-only for all clients.
 * - Read operations are public, write operations are denied on certain collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to products, but restricts write access to authorized users.
     * @path /products/{productId}
     * @allow (get, list): Any user can read products.
     * @allow (create): Only authorized users can create products.
     * @deny (update, delete): Only authorized users can update or delete products.
     * @principle Allows public read access while restricting write access.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add authorization check for create.
      allow update: if false; // TODO: Add authorization check for update.
      allow delete: if false; // TODO: Add authorization check for delete.
    }

    /**
     * @description Allows public read access to categories, but denies all write access.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read categories.
     * @deny (create, update, delete): No user can create, update, or delete categories.
     * @principle Enforces read-only access to category data.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to user documents to the authenticated user.
     * @path /users/{userId}
     * @allow (get, list): Only the authenticated user can read their own document. Listing is disallowed for all users.
     * @allow (create): Only the authenticated user can create their own document.
     * @allow (update, delete): Only the authenticated user can update or delete their own document.
     * @deny (create): If the userId in the path does not match the authenticated user's UID.
     * @deny (update, delete): If the document does not exist or the userId in the path does not match the authenticated user's UID.
     * @principle Enforces document ownership for user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Denies all access to the schedules collection.
     * @path /schedules/{scheduleId}
     * @deny (get, list, create, update, delete): No user can read or write schedule data.
     * @principle Enforces a completely closed-off collection.
     */
    match /schedules/{scheduleId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Denies all access to the audit collection.
     * @path /audit/{auditId}
     * @deny (get, list, create, update, delete): No user can read or write audit log data.
     * @principle Enforces a completely closed-off collection.
     */
    match /audit/{auditId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the EXISTING document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}