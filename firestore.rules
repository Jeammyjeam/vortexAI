/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, role-based access control model with an emphasis on simplicity and auditability.
 * It avoids complex queries in rules, instead relying on data denormalization to make authorization decisions efficient.
 *
 * Data Structure:
 * - /products/{productId}: Publicly readable, owner-controlled writes. The `Product` document must contain an `ownerId` field.
 * - /categories/{categoryId}: Publicly readable. Only admins can create, update, or delete categories.
 * - /users/{userId}: Owner-only access to user profiles.
 * - /schedules/{scheduleId}:  Publicly readable, owner-controlled writes. The `Schedule` document must contain an `ownerId` field.
 * - /audit/{auditId}:  Write-only by admins, never readable by regular users.
 *
 * Key Security Decisions:
 * - Public Read Access: The `/products` and `/categories` collections are publicly readable to allow for open browsing and discovery.
 * - Admin Role: A global admin role is enforced via the `isAdmin()` function, granting elevated privileges for managing critical data.
 * - Audit Logging: The `/audit` collection is strictly write-only for admins, ensuring that audit logs cannot be tampered with or viewed by unauthorized users.
 * - Denormalization: This ruleset avoids complex `get()` operations by requiring that authorization-related data (e.g., ownership) be denormalized directly onto the documents being secured.
 * - User Listing Disabled: Listing all users is disallowed to prevent unauthorized enumeration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to products and restricts write access to owners.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product data.
     * @allow (create): Only the authenticated owner can create a product, and the `ownerId` field must match their UID.
     * @allow (update, delete): Only the authenticated owner of the existing product can modify or delete it.
     * @deny (create): If the `ownerId` field does not match the authenticated user's UID.
     * @deny (update, delete): If the authenticated user is not the owner of the existing product.
     * @principle Public read, owner-only writes with ownership validation on create, update, and delete.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Grants public read access to categories and restricts write access to admins.
     * @path /categories/{categoryId}
     * @allow (get, list): Any user can read category data.
     * @allow (create, update, delete): Only admins can create, update, or delete categories.
     * @deny (create, update, delete): If the user is not an admin.
     * @principle Public read, admin-only writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Restricts access to user profiles to the owner of the profile.
     * @path /users/{userId}
     * @allow (get): Only the owner can read their own profile.
     * @allow (create): Only the user themselves can create their profile, and the userId must match their UID.
     * @allow (update, delete): Only the owner can update or delete their own profile.
     * @deny (list): Listing all users is disallowed.
     * @deny (create): If the userId does not match the authenticated user's UID.
     * @deny (update, delete): If the authenticated user is not the owner of the profile.
     * @principle Owner-only access to user data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
      allow list: if false;
    }

        /**
     * @description Grants public read access to schedules and restricts write access to owners.
     * @path /schedules/{scheduleId}
     * @allow (get, list): Any user can read schedule data.
     * @allow (create): Only the authenticated owner can create a schedule, and the `ownerId` field must match their UID.
     * @allow (update, delete): Only the authenticated owner of the existing schedule can modify or delete it.
     * @deny (create): If the `ownerId` field does not match the authenticated user's UID.
     * @deny (update, delete): If the authenticated user is not the owner of the existing schedule.
     * @principle Public read, owner-only writes with ownership validation on create, update, and delete.
     */
    match /schedules/{scheduleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Restricts access to audit logs to admins only (write-only).
     * @path /audit/{auditId}
     * @allow (create): Only admins can create audit logs.
     * @deny (get, list, update, delete): Regular users cannot read, list, update, or delete audit logs.
     * @principle Admin-only write access to audit logs.
     */
    match /audit/{auditId} {
      allow create: if isAdmin();
      allow get, list, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }
  }
}