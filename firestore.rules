/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with public read access for product listings.
 *
 * Data Structure:
 * - /productListings/{productListingId}: Publicly readable product listings. Only admins can create, update, or delete.
 * - /productListings/{productListingId}/socialPosts/{socialPostId}: Social posts associated with a product listing. Only admins can manage.
 * - /productListings/{productListingId}/analyticsData/{analyticsDataId}: Analytics data for a product listing. Only admins can manage.
 * - /roles_admin/{adminUserId}: Documents indicating admin users. Document existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Product listings are publicly readable to allow open access for storefront UIs and SEO crawlers.
 * - Only authenticated admins can create, update, or delete product listings, social posts, and analytics data.
 * - The existence of a document in the `/roles_admin/{adminUserId}` collection grants admin privileges.
 * - Listing of documents in `/roles_admin` is denied to prevent unauthorized enumeration of admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product listings, but restricts write access to authenticated admins only.
     * @path /productListings/{productListingId}
     * @allow (get, list) - Any user can read product listings.
     * @allow (create, update, delete) - An authenticated user with admin privileges can create, update, or delete product listings.
     * @deny (create, update, delete) - Any non-admin user attempts to create, update, or delete product listings.
     * @principle Public read, admin-only write access control.
     */
    match /productListings/{productListingId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admin users to manage social posts associated with a specific product listing.
     * @path /productListings/{productListingId}/socialPosts/{socialPostId}
     * @allow (create, update, delete) - An authenticated user with admin privileges can create, update, or delete social posts.
     * @deny (create, update, delete) - Any non-admin user attempts to create, update, or delete social posts.
     * @principle Admin-only write access control.
     */
    match /productListings/{productListingId}/socialPosts/{socialPostId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admin users to manage analytics data associated with a specific product listing.
     * @path /productListings/{productListingId}/analyticsData/{analyticsDataId}
     * @allow (create, update, delete) - An authenticated user with admin privileges can create, update, or delete analytics data.
     * @deny (create, update, or delete) - Any non-admin user attempts to create, update, or delete analytics data.
     * @principle Admin-only write access control.
     */
    match /productListings/{productListingId}/analyticsData/{analyticsDataId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows only authenticated users to create admin roles by creating a document with their uid as the doc id
     * @path /roles_admin/{adminUserId}
     */
    match /roles_admin/{adminUserId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == adminUserId;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user has admin privileges by checking for the existence of a document with their UID in the /roles_admin collection.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}