/**
 * @fileOverview Firestore Security Rules for the VORTEX AI GRID application.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence by avoiding hierarchical dependencies and enforcing access control based on resource-specific rules.
 * Admin privileges are granted based on the existence of a document in the `roles_admin` collection.
 *
 * Data Structure:
 * - /productListings/{productListingId}: Stores publicly available product listings.
 * - /productListings/{productListingId}/socialPosts/{socialPostId}: Stores social media posts related to a product listing.
 * - /productListings/{productListingId}/analyticsData/{analyticsDataId}: Stores analytics data related to a product listing.
 * - /roles_admin/{adminUserId}: Stores admin user IDs. Existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Admin privileges are determined by the presence of a document in the `roles_admin` collection.
 * - Product listings are considered publicly readable.
 * - Listing operations are secured using path-based authorization, ensuring that only authorized data is exposed.
 *
 * Denormalization for Authorization:
 *   - The `roles_admin` collection uses document existence as a proxy for admin privileges, avoiding the need to store complex role data within user documents.
 * Structural Segregation:
 *   - The separation of product listings and admin roles into distinct top-level collections ensures that access control rules are well-defined and prevent unintended data exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to product listings and restricts write access to admins.
     * @path /productListings/{productListingId}
     * @allow get, list: Anyone can read product listings.
     * @allow create, update, delete: Only admins can create, update, or delete product listings.
     * @deny create, update, delete: Non-admins cannot create, update, or delete product listings.
     * @principle Allows public read access while restricting write access to authorized users.
     */
    match /productListings/{productListingId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Restricts access to social posts to admins only.
     * @path /productListings/{productListingId}/socialPosts/{socialPostId}
     * @allow create, update, delete, get, list: Only admins can perform any operation on social posts.
     * @deny create, update, delete, get, list: Non-admins cannot perform any operation on social posts.
     * @principle Enforces admin-only access for managing social media posts.
     */
    match /productListings/{productListingId}/socialPosts/{socialPostId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Restricts access to analytics data to admins only.
     * @path /productListings/{productListingId}/analyticsData/{analyticsDataId}
     * @allow create, update, delete, get, list: Only admins can perform any operation on analytics data.
     * @deny create, update, delete, get, list: Non-admins cannot perform any operation on analytics data.
     * @principle Enforces admin-only access for managing analytics data.
     */
    match /productListings/{productListingId}/analyticsData/{analyticsDataId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage the roles_admin collection.
     * @path /roles_admin/{adminUserId}
     * @allow get, list, create, update, delete: Only admins can manage the roles_admin collection.
     * @deny create, update, delete, get, list: Non-admins cannot manage the roles_admin collection.
     * @principle  Admin role management through document existence in a dedicated collection.
     */
    match /roles_admin/{adminUserId} {
      allow get, list, create, update, delete: if isAdmin() && request.auth.uid == adminUserId;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}