/**
 * @fileoverview Firestore Security Rules for VORTEX AI GRID.
 *
 * Core Philosophy:
 * This ruleset provides a secure foundation for the VORTEX AI GRID application,
 * focusing on autonomous trend extraction, cognitive data refinement, and AI-driven
 * social media posting. It uses a combination of ownership-based access control and
 * role-based access control to protect data.  It uses the principle of Structural
 * Segregation to improve security.
 *
 * Data Structure:
 * - /productListings/{listingId}: Public product listings.
 * - /productListings/{listingId}/socialPosts/{postId}: Social posts related to listings.
 * - /users/{userId}: User profiles, accessible only to the user.
 * - /users/{userId}/adminActionLogs/{logId}: Admin action logs, accessible only to admins.
 * - /productListings/{listingId}/analyticsData/{analyticsId}: Analytics data, accessible to admins.
 * - /roles_admin/{userId}: Documents granting admin roles.
 *
 * Key Security Decisions:
 * - Public read access to product listings.
 * - User-owned data is strictly controlled.
 * - Admin role is required to access admin-related data.
 *
 * Denormalization for Authorization:
 * - The `adminActionLogs` collection denormalizes the `userId` to allow for
 *   independent authorization checks without needing to fetch the parent user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product listings, but restricts write access to owners.
     * @path /productListings/{listingId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null;
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @deny create: if request.auth == null;
     * @principle Allows public reads while protecting writes with ownership.
     */
    match /productListings/{listingId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows creating a social post, but other write actions are denied.
     * @path /productListings/{listingId}/socialPosts/{postId}
     * @allow get, list: if true;
     * @allow create: if request.auth != null;
     * @allow update: if false;
     * @allow delete: if false;
     * @deny create: if request.auth == null;
     * @principle Restricts access to a user's own data tree.
     */
    match /productListings/{listingId}/socialPosts/{postId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read/write their own user document.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows admins to read/write admin action logs for a specific user.
     * @path /users/{userId}/adminActionLogs/{logId}
     * @allow get, list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Restricts admin action log access to admins only.
     */
    match /users/{userId}/adminActionLogs/{logId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read/write analytics data for a product listing.
     * @path /productListings/{listingId}/analyticsData/{analyticsId}
     * @allow get, list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Restricts analytics data access to admins only.
     */
    match /productListings/{listingId}/analyticsData/{analyticsId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

      /**
       * @description Allows creating admin roles based on the id of the signed in user
       * @path /roles_admin/{userId}
       * @allow get: if isAdmin();
       * @allow list: if isAdmin();
       * @allow create: if isAdmin();
       * @allow update: if isAdmin();
       * @allow delete: if isAdmin();
       * @principle Restricts creating a new user to only be done by an admin
       */
      match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin() && request.auth.uid == userId;
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}