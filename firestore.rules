/**
 * @description This ruleset enforces a strict owner-based access control model for user data,
 *              allows public read access to product information, and restricts schedule and audit log access.
 *
 * Data Structure:
 * - /products/{productId}: Publicly readable product data. Only authenticated users can create products,
 *   and only the creator can modify or delete them.
 * - /users/{userId}:  Stores admin user profiles.  Only the user themselves can read/write their own profile.
 * - /schedules/{scheduleId}: Stores schedules. Only authenticated users can create schedules,
 *   and only the creator can modify or delete them.
 * - /audit/{auditId}: Stores audit logs.  No client-side access is permitted.
 *
 * Key Security Decisions:
 * - Products are publicly readable but writable only by authenticated users who are the owner.
 * - Users can only read and write their own profile data. User listing is disallowed.
 * - Schedules are writable only by authenticated users who are the owner.
 * - Audit logs are completely inaccessible from the client.
 * - No data validation beyond ownership checks is performed in this prototype phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for product documents.  Products are publicly readable,
     *              but create/update/delete operations are restricted to the product's owner.
     * @path /products/{productId}
     * @allow (get, list): Any user can read product information.
     * @allow (create): Authenticated user can create a product if they are the owner
     * @allow (update, delete): Only the owner of the product can modify or delete it.
     * @deny (create): An unauthenticated user attempts to create a product.
     * @deny (update, delete): A user attempts to modify or delete a product they don't own.
     * @principle Allows public read access with owner-only writes.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.source_url is string && request.resource.data.title is string && request.resource.data.price is number;
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access control for user profile documents.  Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, update, delete): The user with the matching UID can access their own profile.
     * @allow (create): Allows user creation if the authenticated user's ID matches the document ID.
     * @deny (get, update, delete): A user attempts to access another user's profile.
     * @deny (list): Listing all users is not permitted.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId && request.resource.data.email is string && request.resource.data.role is string && request.resource.data.displayName is string;
      allow update: if isOwner(userId) && resource != null && request.resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access control for schedule documents.  Schedules are publicly readable,
     *              but create/update/delete operations are restricted to the schedule's owner.
     * @path /schedules/{scheduleId}
     * @allow (get, list): Any user can read schedule information.
     * @allow (create): Authenticated user can create a schedule if they are the owner
     * @allow (update, delete): Only the owner of the schedule can modify or delete it.
     * @deny (create): An unauthenticated user attempts to create a schedule.
     * @deny (update, delete): A user attempts to modify or delete a schedule they don't own.
     */
    match /schedules/{scheduleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.product_id is string && request.resource.data.channel is string && request.resource.data.content is string && request.resource.data.scheduled_at is string && request.resource.data.status is string;
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Restricts all client-side access to audit logs.
     * @path /audit/{auditId}
     * @allow (get, list, create, update, delete): No client-side access is permitted.
     * @deny (get, list, create, update, delete): Any attempt to access audit logs from the client.
     * @principle Secures sensitive system data by denying all client access.
     */
    match /audit/{auditId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false && resource != null;
      allow delete: if false && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}