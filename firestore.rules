/**
 * @fileoverview Firestore Security Rules for the VORTEX AI GRID application.
 *
 * Core Philosophy:
 * This ruleset provides a baseline level of security that prioritizes administrative control over data with open read access.
 *
 * Data Structure:
 * - /productListings/{productListingId}: Public product listing data.
 * - /productListings/{productListingId}/socialPosts/{socialPostId}: Social media posts associated with a listing.
 * - /productListings/{productListingId}/analyticsData/{analyticsDataId}: Analytics data for a listing.
 * - /roles_admin/{adminUserId}:  Admin user role definitions. Existence of a document grants admin privileges. Document content is not used.
 *
 * Key Security Decisions:
 * - Product listings are publicly readable but only writable by admins.
 * - Subcollections inherit the authorization posture of their parent documents (admin controlled).
 * - Admin status is determined by the existence of a document in the `/roles_admin` collection.
 * - Data shape validation is relaxed during prototyping to accelerate development, focusing instead on authentication and authorization.
 *
 * Denormalization for Authorization:
 * - The rules rely on checking for the existence of a document in the `roles_admin` collection to grant admin privileges.  This avoids more complex role-based access control mechanisms.
 *
 * Structural Segregation:
 * - Admin role definitions are stored in a separate collection (`roles_admin`) to clearly segregate administrative data from product listing data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to product listings, but restricts write access to admin users.
     * @path /productListings/{productListingId}
     * @allow get, list: if true;
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Allows public read but requires admin role for writes.
     */
    match /productListings/{productListingId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();

      /**
       * @description Allows admin users to create, read, update, and delete social posts associated with a product listing.
       * @path /productListings/{productListingId}/socialPosts/{socialPostId}
       * @allow get, list: if isAdmin();
       * @allow create: if isAdmin();
       * @allow update: if isAdmin();
       * @allow delete: if isAdmin();
       * @principle Restricts access to a subcollection to admin users.
       */
      match /productListings/{productListingId}/socialPosts/{socialPostId} {
        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }

      /**
       * @description Allows admin users to create, read, update, and delete analytics data associated with a product listing.
       * @path /productListings/{productListingId}/analyticsData/{analyticsDataId}
       * @allow get, list: if isAdmin();
       * @allow create: if isAdmin();
       * @allow update: if isAdmin();
       * @allow delete: if isAdmin();
       * @principle Restricts access to a subcollection to admin users.
       */
      match /productListings/{productListingId}/analyticsData/{analyticsDataId} {
        allow get, list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
    }

    /**
     * @description Allows anyone to read the list of admin users, but only allows admins to create, update, or delete them.
     * @path /roles_admin/{adminUserId}
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Restricts modifications of the roles_admin collection to admins.
     */
    match /roles_admin/{adminUserId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}