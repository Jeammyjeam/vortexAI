/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default posture, restricting data access based on user roles (admin, editor, viewer) and ownership.
 * Data validation is minimized for rapid prototyping, focusing only on relational integrity.
 *
 * Data Structure:
 * - /products/{productId}: Publicly readable, but writes restricted to authorized users.
 * - /categories/{categoryId}: Publicly readable, but writes restricted to authorized users.
 * - /users/{userId}: User profiles. Only the user and admins can read/write.
 * - /schedules/{scheduleId}: Publicly readable, but writes restricted to authorized users.
 * - /audit/{auditId}: Write-only, restricted to system processes or admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Roles are managed via the /users/{userId} document.
 * - In this prototyping phase, data validation is relaxed to accelerate development. More strict data validation rules will be added in later development phases.
 *
 * Denormalization for Authorization:
 *   Admin status is checked via the `/users/{userId}` document for each user.
 *   This avoids needing to add a custom claim on every user.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document, based on the UID.
     * @param {string} userId - The user ID to check against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the document.
     * @param {string} userId - The user ID to check against the request's auth UID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the specified role by reading the user document.
     * @param {string} role - The role to check for (e.g., 'admin', 'editor').
     */
    function hasRole(role) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    /**
     * @description Checks if the user has admin role.
     */
    function isAdmin() {
        return hasRole('admin');
    }

    /**
     * @description Checks if the user has editor role.
     */
    function isEditor() {
        return hasRole('editor');
    }

    /**
     * @description Checks if the user has viewer role.
     */
    function isViewer() {
        return hasRole('viewer');
    }


    /**
     * @description Rules for the /products collection. Allows public read, but restricts writes to admins and editors.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read or list products.
     * @allow (create, update, delete) - Only admins and editors can create, update, or delete products.
     *   Example: User with admin role creates a new product.
     * @deny (create, update, delete) - A non-admin user attempts to create a product.
     *   Example: User without admin role attempts to create a new product.
     * @principle Allows public read access to product information, but restricts modification to authorized personnel.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin() || isEditor();
      allow update: if isAdmin() || isEditor();
      allow delete: if isAdmin() || isEditor();
    }

    /**
     * @description Rules for the /categories collection. Allows public read, but restricts writes to admins and editors.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user can read or list categories.
     *   Example: Anonymous user reads a category.
     * @allow (create, update, delete) - Only admins and editors can create, update, or delete categories.
     *   Example: User with editor role edits a category.
     * @deny (create, update, delete) - A non-admin user attempts to create a category.
     *   Example: User without editor role attempts to edit a category.
     * @principle Allows public read access to category information, but restricts modification to authorized personnel.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin() || isEditor();
      allow update: if isAdmin() || isEditor();
      allow delete: if isAdmin() || isEditor();
    }

    /**
     * @description Rules for the /users collection. Only the user and admins can read/write their own document. User listing is disallowed.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - The user can get, create, update, and delete their own user document.
     *   Example: User updates their display name.
     * @allow (get, create, update, delete) - An admin can get, create, update, and delete any user document.
     *   Example: Admin updates another user's role.
     * @deny (get, create, update, delete) - A non-admin user attempts to modify another user's document.
     *   Example: User attempts to change another user's email.
     * @deny (list) - Listing all users is not allowed.
     *   Example: An attempt to list all user accounts.
     * @principle Enforces user-ownership for profile data and allows admin override for management.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /schedules collection. Allows public read, but restricts writes to admins and editors.
     * @path /schedules/{scheduleId}
     * @allow (get, list) - Any user can read or list schedules.
     *   Example: Anonymous user reads a schedule.
     * @allow (create, update, delete) - Only admins and editors can create, update, or delete schedules.
     *   Example: User with editor role edits a schedule.
     * @deny (create, update, delete) - A non-admin user attempts to create a schedule.
     *   Example: User without editor role attempts to edit a schedule.
     * @principle Allows public read access to schedule information, but restricts modification to authorized personnel.
     */
    match /schedules/{scheduleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin() || isEditor();
      allow update: if isAdmin() || isEditor();
      allow delete: if isAdmin() || isEditor();
    }

    /**
     * @description Rules for the /audit collection. Only admins can write audit logs. Read access is denied to everyone.
     * @path /audit/{auditId}
     * @allow (create) - Only admins can create audit logs.
     *   Example: Admin creates an audit log entry.
     * @deny (get, list, update, delete) - No one can read, list, update, or delete audit logs.
     *   Example: Any attempt to read, list, update, or delete an audit log entry.
     * @principle Restricts audit log creation to authorized personnel and prevents unauthorized access to audit data.
     */
    match /audit/{auditId} {
      allow get: if false;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

      /**
     * @description Rules for the /system_logs collection. Only admins can write system logs. Read access is denied to everyone.
     * @path /system_logs/{logId}
     * @allow (create) - Only admins can create system logs.
     *   Example: Admin creates an system log entry.
     * @deny (get, list, update, delete) - No one can read, list, update, or delete audit logs.
     *   Example: Any attempt to read, list, update, or delete an audit log entry.
     */
    match /system_logs/{logId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /system_logs/scraper_status document. Only admins can read system logs. Write access is denied to everyone.
     * @path /system_logs/scraper_status
     * @allow (get) - Only admins can read system logs.
     *   Example: An admin attempts to read the `scraper_status` document.
     * @deny (create, list, update, delete) - No one can create, list, update, or delete system logs.
     *   Example: Any attempt to create, list, update, or delete an audit log entry.
     */
    match /system_logs/scraper_status {
        allow get: if isAdmin();
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }

  }
}