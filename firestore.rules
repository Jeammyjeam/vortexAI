/**
 * @file Overview
 * This ruleset enforces a mixed security model, allowing public read access to product data while restricting write access to authorized users.
 * User data is strictly private, accessible only to the owner. Schedules and Audit Logs are only accessible to authorized users.
 *
 * @dataStructure
 * - /products/{productId}: Publicly readable product information. Write access controlled by authorization.
 * - /users/{userId}: Private user profiles, accessible only to the user.
 * - /schedules/{scheduleId}: Data about scheduled social media posts. Requires authentication for access.
 * - /audit/{auditId}: Audit logs of system actions, read and write access controlled by authorization.
 *
 * @keySecurityDecisions
 * - Public Read Access for Products: The `products` collection is readable by all users, including unauthenticated users. This is intended for showcasing products.
 * - Owner-Only Access for Users: The `users` collection enforces strict ownership. Each user can only access their own document. User listing is disallowed.
 * - Authenticated Access for Schedules: Requires user authentication to access schedules.
 * - Authenticated Access for Audit Logs: Requires user authentication to access audit logs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to products, but restricts write access to authorized users.
     * @path /products/{productId}
     * @allow (get, list): Any user (or no user) can read product data.
     * @allow (create): Only authenticated users can create products. The 'listing_status' must be set to 'draft'.
     * @allow (update, delete): Only authenticated users can modify or delete products.
     * @deny (create): Non-authenticated users cannot create products.
     * @deny (update, delete): Non-authenticated users cannot modify or delete products.
     * @principle Allows public read, restricts write access to authenticated users.
     */
    match /products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Restricts access to user profiles to the owner of the profile.
     * @path /users/{userId}
     * @allow (get): Only the user with the matching UID can read their profile.
     * @allow (create): Only the user with the matching UID can create their profile.
     * @allow (update, delete): Only the user with the matching UID can update or delete their profile.
     * @deny (get, create, update, delete): Any other user cannot access another user's profile.
     * @deny (list): Listing all users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows authenticated users to manage schedules.
     * @path /schedules/{scheduleId}
     * @allow (get, list, create, update, delete): Only authenticated users can access schedules.
     * @deny (get, list, create, update, delete): Non-authenticated users cannot access schedules.
     * @principle Requires authentication for accessing schedules.
     */
    match /schedules/{scheduleId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Restricts access to audit logs to authenticated users.
     * @path /audit/{auditId}
     * @allow (get, list, create, update, delete): Only authenticated users can access audit logs.
     * @deny (get, list, create, update, delete): Non-authenticated users cannot access audit logs.
     * @principle Requires authentication for accessing audit logs.
     */
    match /audit/{auditId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}