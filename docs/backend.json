{
  "entities": {
    "ProductListing": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProductListing",
      "type": "object",
      "description": "Represents a product listing extracted and processed by the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product listing."
        },
        "title": {
          "type": "string",
          "description": "Title of the product listing."
        },
        "description": {
          "type": "string",
          "description": "Description of the product."
        },
        "category": {
          "type": "string",
          "description": "Category of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "currency": {
          "type": "string",
          "description": "Currency of the product price."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the product image.",
          "format": "uri"
        },
        "sourceUrl": {
          "type": "string",
          "description": "URL of the original product listing.",
          "format": "uri"
        },
        "keywords": {
          "type": "array",
          "description": "Keywords associated with the product listing.",
          "items": {
            "type": "string"
          }
        },
        "isHalal": {
          "type": "boolean",
          "description": "Indicates whether the product complies with Halal standards."
        },
        "approvalStatus": {
          "type": "string",
          "description": "The current approval status of the product listing (e.g., pending, approved, rejected)."
        },
        "rejectionReason": {
          "type": "string",
          "description": "If the product was rejected, this field provides the reason for rejection."
        },
        "shopifyId": {
          "type": "string",
          "description": "Reference to Shopify Product. (Relationship: Shopify Product 1:1 ProductListing)"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the product listing was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the product listing was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "category",
        "price",
        "currency",
        "imageUrl",
        "sourceUrl",
        "keywords",
        "isHalal",
        "approvalStatus",
        "createdAt",
        "updatedAt"
      ]
    },
    "SocialPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SocialPost",
      "type": "object",
      "description": "Represents a social media post generated by the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the social media post."
        },
        "platform": {
          "type": "string",
          "description": "The social media platform (e.g., X, Instagram, TikTok)."
        },
        "postId": {
          "type": "string",
          "description": "Identifier of post on social media platform."
        },
        "content": {
          "type": "string",
          "description": "Content of the social media post (text and/or media)."
        },
        "scheduledTime": {
          "type": "string",
          "description": "Scheduled time for the post to be published.",
          "format": "date-time"
        },
        "actualPostTime": {
          "type": "string",
          "description": "Actual time that post was sent.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the post (e.g., scheduled, published, failed)."
        },
        "productListingId": {
          "type": "string",
          "description": "Reference to ProductListing. (Relationship: ProductListing 1:N SocialPost)"
        },
        "engagementMetrics": {
          "type": "string",
          "description": "Engagement metrics for the post"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the social media post was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the social media post was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "platform",
        "content",
        "scheduledTime",
        "status",
        "productListingId",
        "createdAt",
        "updatedAt"
      ]
    },
    "AdminUser": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminUser",
      "type": "object",
      "description": "Represents an admin user who manages the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the admin user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the admin user.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "Name of the admin user."
        },
        "role": {
          "type": "string",
          "description": "Role of the admin user (e.g., superadmin, moderator)."
        },
        "permissions": {
          "type": "array",
          "description": "Permissions granted to the admin user.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the admin user was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the admin user was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "name",
        "role",
        "createdAt",
        "updatedAt"
      ]
    },
    "AnalyticsData": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AnalyticsData",
      "type": "object",
      "description": "Represents the engagement metrics data for social media posts.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the analytics data."
        },
        "productId": {
          "type": "string",
          "description": "Reference to ProductListing. (Relationship: ProductListing 1:N AnalyticsData)"
        },
        "engagementHeatmap": {
          "type": "string",
          "description": "The heat map data."
        },
        "priceVolatility": {
          "type": "number",
          "description": "Price Volatility measure."
        },
        "viralVelocity": {
          "type": "number",
          "description": "The rate at which the product listing is going viral."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the analytics data was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp of when the analytics data was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "productId",
        "engagementHeatmap",
        "priceVolatility",
        "viralVelocity",
        "createdAt",
        "updatedAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/productListings/{productListingId}",
        "definition": {
          "entityName": "ProductListing",
          "schema": {
            "$ref": "#/backend/entities/ProductListing"
          },
          "description": "Stores product listings extracted and processed by the system.",
          "params": [
            {
              "name": "productListingId",
              "description": "Unique identifier for the product listing."
            }
          ]
        }
      },
      {
        "path": "/productListings/{productListingId}/socialPosts/{socialPostId}",
        "definition": {
          "entityName": "SocialPost",
          "schema": {
            "$ref": "#/backend/entities/SocialPost"
          },
          "description": "Stores social media posts associated with a product listing.",
          "params": [
            {
              "name": "productListingId",
              "description": "Unique identifier for the product listing."
            },
            {
              "name": "socialPostId",
              "description": "Unique identifier for the social media post."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{uid}",
        "definition": {
          "entityName": "AdminUser",
          "schema": {
            "$ref": "#/backend/entities/AdminUser"
          },
          "description": "Stores admin user roles. Existence of a document indicates admin privileges. Used for DBAC (Database-Based Access Control).",
          "params": [
            {
              "name": "uid",
              "description": "User ID of the admin user."
            }
          ]
        }
      },
      {
        "path": "/analyticsData/{analyticsDataId}",
        "definition": {
          "entityName": "AnalyticsData",
          "schema": {
            "$ref": "#/backend/entities/AnalyticsData"
          },
          "description": "Stores analytics data for product listings.",
          "params": [
            {
              "name": "analyticsDataId",
              "description": "Unique identifier for the analytics data."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the VORTEX AI GRID application, focusing on scalability, security, and maintainability. The structure is segregated to isolate data with different security requirements, adhering to the principle of homogeneous security posture.  Authorization Independence is achieved through denormalization, specifically for admin roles, to avoid `get()` calls in security rules. QAPs (Rules are not Filters) are supported by structuring collections to allow secure list operations based on role.  The structure includes collections for product listings, social media posts, admin users, and analytics data.  Admin roles are managed via document existence check in the `/roles_admin/{uid}` collection."
  }
}